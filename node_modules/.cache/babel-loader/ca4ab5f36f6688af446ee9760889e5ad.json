{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nexport const GET_POKEMONS = gql`\n  query pokemons($first: Int!) {\n    pokemons(first: $first) {\n      id\n      name\n      type\n    }\n  }\n`;\nexport const useGetPokemons = () => {\n  _s();\n\n  const {\n    data,\n    ...queryRes\n  } = useQuery(GET_POKEMONS, {\n    variables: {\n      first: 151 // Keep hard coded\n\n    }\n  });\n  const pokemons = useMemo(() => (data === null || data === void 0 ? void 0 : data.pokemons) || [], [data]);\n  const pokemonOptions = useMemo(() => pokemons.map(p => ({\n    value: p.id,\n    label: p.name\n  })), [pokemons]);\n  return {\n    pokemons,\n    pokemonOptions,\n    ...queryRes\n  };\n};\n\n_s(useGetPokemons, \"GaEga0dafPzyf5H7T8mxhz72Cwk=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/tadas/Downloads/ui-assessment-pokedex-snr/src/hooks/useGetPokemons.ts"],"names":["useMemo","useQuery","gql","GET_POKEMONS","useGetPokemons","data","queryRes","variables","first","pokemons","pokemonOptions","map","p","value","id","label","name"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAYA,OAAO,MAAMC,YAAY,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP,OAAO,MAAME,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,MAAwBL,QAAQ,CAACE,YAAD,EAAe;AACnDI,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,GADE,CACG;;AADH;AADwC,GAAf,CAAtC;AAMA,QAAMC,QAAmB,GAAGT,OAAO,CAAC,MAAM,CAAAK,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,QAAN,KAAkB,EAAzB,EAA6B,CAACJ,IAAD,CAA7B,CAAnC;AAEA,QAAMK,cAA+B,GAAGV,OAAO,CAC7C,MAAMS,QAAQ,CAACE,GAAT,CAAcC,CAAD,KAAiB;AAAEC,IAAAA,KAAK,EAAED,CAAC,CAACE,EAAX;AAAeC,IAAAA,KAAK,EAAEH,CAAC,CAACI;AAAxB,GAAjB,CAAb,CADuC,EAE7C,CAACP,QAAD,CAF6C,CAA/C;AAKA,SAAO;AACLA,IAAAA,QADK;AAELC,IAAAA,cAFK;AAGL,OAAGJ;AAHE,GAAP;AAKD,CAnBM;;GAAMF,c;UACmBH,Q","sourcesContent":["import { useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport type Pokemon = {\n  id: string;\n  name: string;\n};\n\nexport type PokemonOption = {\n  value: Pokemon['id'];\n  label: Pokemon['name'];\n};\n\nexport const GET_POKEMONS = gql`\n  query pokemons($first: Int!) {\n    pokemons(first: $first) {\n      id\n      name\n      type\n    }\n  }\n`;\n\nexport const useGetPokemons = () => {\n  const { data, ...queryRes } = useQuery(GET_POKEMONS, {\n    variables: {\n      first: 151, // Keep hard coded\n    },\n  });\n\n  const pokemons: Pokemon[] = useMemo(() => data?.pokemons || [], [data]);\n\n  const pokemonOptions: PokemonOption[] = useMemo(\n    () => pokemons.map((p: Pokemon) => ({ value: p.id, label: p.name })),\n    [pokemons]\n  );\n\n  return {\n    pokemons,\n    pokemonOptions,\n    ...queryRes,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}